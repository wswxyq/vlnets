#include <unordered_map>
#include "PFParticleVarExtractor.h"

#include "lardataobj/RecoBase/SpacePoint.h"
#include "dunereco/AnaUtils/DUNEAnaEventUtils.h"
#include "dunereco/AnaUtils/DUNEAnaPFParticleUtils.h"
#include "dunereco/AnaUtils/DUNEAnaShowerUtils.h"
#include "dunereco/AnaUtils/DUNEAnaTrackUtils.h"

#include "utils.h"

#include "canvas/Persistency/Common/FindOneP.h"
#include "lardataobj/AnalysisBase/MVAPIDResult.h"
#include "lardata/DetectorInfoServices/DetectorClocksService.h"
#include "larsim/Utils/TruthMatchUtils.h"
#include "larsim/MCCheater/ParticleInventoryService.h"

namespace VLN
{

    static const std::vector<std::string> SCALAR_VARS({});
    static const std::vector<std::string> VECTOR_VARS({"length",
                                                       "is_shower",
                                                       "start.x",
                                                       "start.y",
                                                       "start.z",
                                                       "dir.x",
                                                       "dir.y",
                                                       "dir.z",
                                                       "energy",
                                                       "nHit",
                                                       "charge",
                                                       "calE",
                                                       "electronScore",
                                                       "muonScore",
                                                       "photonScore",
                                                       "pichScore",
                                                       "protonScore",
                                                       "G4pid"});

    PFParticleVarExtractor::PFParticleVarExtractor(
        const std::string &prefix,
        calo::CalorimetryAlg &algCalorimetry,
        const std::string &labelPFPModule,
        const std::string &labelPFPTrack,
        const std::string &labelPFPShower,
        unsigned int plane) : VarExtractorBase(prefix, SCALAR_VARS, VECTOR_VARS),
                              algCalorimetry(algCalorimetry),
                              labelPFPModule(labelPFPModule),
                              labelPFPTrack(labelPFPTrack),
                              labelPFPShower(labelPFPShower),
                              plane(plane)
    {
    }

    void PFParticleVarExtractor::extractTrackVars(
        const art::Event &evt,
        const art::Ptr<recob::PFParticle> &particle,
        VarDict &vars,
        const std::unordered_map<int, std::vector<double>> &trackMap)
    {
        auto track = dune_ana::DUNEAnaPFParticleUtils::GetTrack(
            particle, evt, labelPFPModule, labelPFPTrack);
        auto start = track->Start();
        auto dir = track->StartDirection();

        appendToVectorVar(vars, "is_shower", 0);
        appendToVectorVar(vars, "length", track->Length());
        appendToVectorVar(vars, "start.x", start.x());
        appendToVectorVar(vars, "start.y", start.y());
        appendToVectorVar(vars, "start.z", start.z());
        appendToVectorVar(vars, "dir.x", dir.x());
        appendToVectorVar(vars, "dir.y", dir.y());
        appendToVectorVar(vars, "dir.z", dir.z());
        appendToVectorVar(vars, "energy", track->StartMomentum());

        // print the key and value of the unordered_map
        /*
        for (auto x : trackMap)
        {
            std::cout << "print trackMap" << std::endl;
            std::cout << "Key: " << x.first << " Value: " << x.second[0] << " " << x.second[1] << " " << x.second[2] << " " << x.second[3] << " " << x.second[4] << std::endl;
        }
        */

        if (trackMap.find(track->ID()) != trackMap.end())
        {
            auto trackInfo = trackMap.at(track->ID());
            appendToVectorVar(vars, "muonScore", trackInfo[0]);
            appendToVectorVar(vars, "electronScore", trackInfo[1]);
            appendToVectorVar(vars, "pichScore", trackInfo[2]);
            appendToVectorVar(vars, "photonScore", trackInfo[3]);
            appendToVectorVar(vars, "protonScore", trackInfo[4]);
        }
        else
        {
            appendToVectorVar(vars, "muonScore", -1);
            appendToVectorVar(vars, "electronScore", -1);
            appendToVectorVar(vars, "pichScore", -1);
            appendToVectorVar(vars, "photonScore", -1);
            appendToVectorVar(vars, "protonScore", -1);
        }
        const auto hits = dune_ana::DUNEAnaTrackUtils::GetHits(
            track, evt, labelPFPTrack);

        extractBasicVars(evt, hits, vars);

        // Get clockData for TrueParticleIDFromTotalRecoHits
        auto const clockData = art::ServiceHandle<detinfo::DetectorClocksService>()->DataFor(evt);
        // Get the true particle ID from the hits
        std::vector<art::Ptr<recob::Hit>> pfpHits;
        pfpHits = dune_ana::DUNEAnaTrackUtils::GetHits(track, evt, labelPFPTrack);
        int g4ID = TruthMatchUtils::TrueParticleIDFromTotalRecoHits(clockData, pfpHits, 1);
        if (TruthMatchUtils::Valid(g4ID))
        {
            art::ServiceHandle<cheat::ParticleInventoryService> pi_serv;
            auto matched_mcparticle = pi_serv->ParticleList().at(g4ID);
            appendToVectorVar(vars, "G4pid", matched_mcparticle->PdgCode());
        }
        else
        {
            appendToVectorVar(vars, "G4pid", 0);
        }
    }

    void PFParticleVarExtractor::extractShowerVars(
        const art::Event &evt,
        const art::Ptr<recob::PFParticle> &particle,
        VarDict &vars,
        const std::unordered_map<double, std::vector<double>> &showerMap)
    {
        auto shower = dune_ana::DUNEAnaPFParticleUtils::GetShower(
            particle, evt, labelPFPModule, labelPFPShower);
        auto start = shower->ShowerStart();
        auto dir = shower->Direction();
        auto energy = shower->Energy();

        /*
        std::cout << "print shower info: " << std::endl;
        std::cout << "Shower  has Length " << shower->Length() << std::endl;
        std::cout << "Shower  has ID " << shower->ID() << std::endl;
        std::cout << "Shower  has start.x()" << shower->ShowerStart().x() << std::endl;
        std::cout << "Shower  has start.y()" << shower->ShowerStart().y() << std::endl;
        std::cout << "Shower  has start.z()" << shower->ShowerStart().z() << std::endl;
        */

        appendToVectorVar(vars, "is_shower", 1);
        appendToVectorVar(vars, "length", shower->Length());
        appendToVectorVar(vars, "start.x", start.x());
        appendToVectorVar(vars, "start.y", start.y());
        appendToVectorVar(vars, "start.z", start.z());
        appendToVectorVar(vars, "dir.x", dir.x());
        appendToVectorVar(vars, "dir.y", dir.y());
        appendToVectorVar(vars, "dir.z", dir.z());
        appendToVectorVar(
            vars, "energy", (energy.size() < plane + 1) ? 0 : energy[plane]);

        // print the key and value of the unordered_map
        /*
        for (auto x : showerMap)
        {
            std::cout << "print showerMap" << std::endl;
            std::cout << "Key: " << x.first << " Value: "
                      << "(size)" << x.second.size() << " >> " << x.second[0] << " " << x.second[1] << " " << x.second[2] << " " << x.second[3] << " " << x.second[4] << std::endl;
        }
        */

        if (showerMap.find(shower->Length()) != showerMap.end())
        {
            auto showerInfo = showerMap.at(shower->Length());
            appendToVectorVar(vars, "muonScore", showerInfo[0]);
            appendToVectorVar(vars, "electronScore", showerInfo[1]);
            appendToVectorVar(vars, "pichScore", showerInfo[2]);
            appendToVectorVar(vars, "photonScore", showerInfo[3]);
            appendToVectorVar(vars, "protonScore", showerInfo[4]);
        }
        else
        {
            appendToVectorVar(vars, "muonScore", -1);
            appendToVectorVar(vars, "electronScore", -1);
            appendToVectorVar(vars, "pichScore", -1);
            appendToVectorVar(vars, "photonScore", -1);
            appendToVectorVar(vars, "protonScore", -1);
        }
        const auto hits = dune_ana::DUNEAnaShowerUtils::GetHits(
            shower, evt, labelPFPShower);

        extractBasicVars(evt, hits, vars);
        // Get clockData for TrueParticleIDFromTotalRecoHits
        auto const clockData = art::ServiceHandle<detinfo::DetectorClocksService const>()->DataFor(evt);
        // auto const clockData = art::ServiceHandle<detinfo::DetectorClocksService>()->DataFor(evt);
        //  Get the true particle ID from the hits
        std::vector<art::Ptr<recob::Hit>> pfpHits;
        pfpHits = dune_ana::DUNEAnaShowerUtils::GetHits(shower, evt, labelPFPTrack);
        int g4ID = TruthMatchUtils::TrueParticleIDFromTotalRecoHits(clockData, pfpHits, 1);
        if (TruthMatchUtils::Valid(g4ID))
        {
            art::ServiceHandle<cheat::ParticleInventoryService> pi_serv;
            auto matched_mcparticle = pi_serv->ParticleList().at(g4ID);
            appendToVectorVar(vars, "G4pid", matched_mcparticle->PdgCode());
        }
        else
        {
            appendToVectorVar(vars, "G4pid", 0);
        }
    }

    void PFParticleVarExtractor::extractBasicVars(
        const art::Event &evt,
        const std::vector<art::Ptr<recob::Hit>> &hits,
        VarDict &vars)
    {
        const auto chargeCalE = calcHitsChargeCalE(
            hits, evt, algCalorimetry, plane);

        appendToVectorVar(vars, "nHit", hits.size());
        appendToVectorVar(vars, "charge", chargeCalE.first);
        appendToVectorVar(vars, "calE", chargeCalE.second);
    }

    void PFParticleVarExtractor::extractVars(const art::Event &evt, VarDict &vars)
    {

        auto track_h = evt.getHandle<std::vector<recob::Track>>(labelPFPTrack);

        const art::FindOneP<anab::MVAPIDResult> findTrackMVAscore(track_h, evt, "pid");

        std::unordered_map<int, std::vector<double>> trackMVAscore;

        if (findTrackMVAscore.isValid())
        {
            // std::cout << "Track MVAscore is valid" << std::endl;
            for (unsigned int iTrack = 0; iTrack < track_h->size(); ++iTrack)
            {
                const art::Ptr<anab::MVAPIDResult> pid = findTrackMVAscore.at(iTrack);
                const art::Ptr<recob::Track> track(track_h, iTrack);
                trackMVAscore[track->ID()].push_back(pid->mvaOutput.at("muon"));
                trackMVAscore[track->ID()].push_back(pid->mvaOutput.at("electron"));
                trackMVAscore[track->ID()].push_back(pid->mvaOutput.at("pich"));
                trackMVAscore[track->ID()].push_back(pid->mvaOutput.at("photon"));
                trackMVAscore[track->ID()].push_back(pid->mvaOutput.at("proton"));
                // std::cout << "Track " << iTrack << " has ID " << track->ID() << std::endl;
            }
        } // findTrackMVAscore.isValid()

        auto shower_h = evt.getHandle<std::vector<recob::Shower>>(labelPFPShower);

        const art::FindOneP<anab::MVAPIDResult> findShowerMVAscore(shower_h, evt, "pid");

        std::unordered_map<double, std::vector<double>> showerMVAscore;

        if (findShowerMVAscore.isValid())
        {
            // std::cout << "Shower MVAscore is valid" << std::endl;
            // std::cout << "=============== print all showers in handle =================" << std::endl;

            for (unsigned int iShower = 0; iShower < shower_h->size(); ++iShower)
            {
                const art::Ptr<anab::MVAPIDResult> pid = findShowerMVAscore.at(iShower);
                const art::Ptr<recob::Shower> shower(shower_h, iShower);

                // don't use Shower ID, all the showers have the same ID -999
                showerMVAscore[shower->Length()].push_back(pid->mvaOutput.at("muon"));
                showerMVAscore[shower->Length()].push_back(pid->mvaOutput.at("electron"));
                showerMVAscore[shower->Length()].push_back(pid->mvaOutput.at("pich"));
                showerMVAscore[shower->Length()].push_back(pid->mvaOutput.at("photon"));
                showerMVAscore[shower->Length()].push_back(pid->mvaOutput.at("proton"));
                /*
                std::cout << "Shower " << iShower << " has Length " << shower->Length() << std::endl;
                std::cout << "Shower " << iShower << " has ID " << shower->ID() << std::endl;
                std::cout << "Shower " << iShower << " has start.x()" << shower->ShowerStart().x() << std::endl;
                std::cout << "Shower " << iShower << " has start.y()" << shower->ShowerStart().y() << std::endl;
                std::cout << "Shower " << iShower << " has start.z()" << shower->ShowerStart().z() << std::endl;
                */
            }
        } // findShowerMVAscore.isValid()

        const std::vector<art::Ptr<recob::PFParticle>> particles = dune_ana::DUNEAnaEventUtils::GetPFParticles(evt, labelPFPModule);

        for (const auto &particle : particles)
        {
            const bool isTrack = dune_ana::DUNEAnaPFParticleUtils::IsTrack(
                particle, evt, labelPFPModule, labelPFPTrack);

            const bool isShower = dune_ana::DUNEAnaPFParticleUtils::IsShower(
                particle, evt, labelPFPModule, labelPFPShower);

            if (isTrack == isShower)
            {
                /* TODO: Maybe handle this condition somehow? */
                continue;
            }

            if (isShower)
            {
                extractShowerVars(evt, particle, vars, showerMVAscore);
            }
            else if (isTrack)
            {
                extractTrackVars(evt, particle, vars, trackMVAscore);
            }
        }
    }

}
